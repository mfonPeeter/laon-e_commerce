{"version":3,"file":"static/js/382.608d3bc8.chunk.js","mappings":"mRA4JA,EApJiB,WACf,OAA8BA,EAAAA,EAAAA,WAAS,GAAK,eAArCC,EAAO,KAAEC,EAAU,KAC1B,GAAwCF,EAAAA,EAAAA,WAAS,GAAM,eAAhDG,EAAY,KAAEC,EAAe,KACpC,GAAkCJ,EAAAA,EAAAA,WAAS,GAAM,eAA1CK,EAAS,KAAEC,EAAY,KAExBC,GAAWC,EAAAA,EAAAA,MAEXC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAE3B,GAIIC,EAAAA,EAAAA,MAHFC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACaC,EAAM,EAAnBC,UAAaD,OAOTE,EAAQ,yCAAG,WAAMC,GAAI,wFAWxB,OAVOC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SAEfd,GAAa,GAGXe,EADEpB,EAEA,oHAGA,wGACH,kBAGmBqB,MAAMD,EAAK,CAC3BE,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBP,MAAAA,EACAC,SAAAA,EACAO,mBAAmB,IAErBC,QAAS,CACP,eAAgB,sBAEjB,KAAD,EAEkB,GAZdC,EAAG,OAYTvB,GAAa,GAERuB,EAAIC,GAAG,CAAD,iCACUD,EAAIE,OAAO,KAAD,GACY,GADnCb,EAAI,OACVd,EAAgB,2BACZc,GAAQA,EAAKc,OAASd,EAAKc,MAAMC,SAAO,uBACpC,IAAIC,MAAMhB,EAAKc,MAAMC,SAAS,KAAD,oBAIpBJ,EAAIE,OAAO,KAAD,GAAvBb,EAAI,OAGJiB,EAAiB,IAAIC,MACzB,IAAIA,MAAOC,UAA8B,KAAjBnB,EAAKoB,WAE/B7B,EAAQ8B,MAAMrB,EAAKsB,QAASL,EAAeM,eAE3CrC,EAAgB,IAEhBG,EAAS,IAAK,CAAEmC,SAAS,IAAQ,kDAEjCtC,EAAgB,KAAM6B,SAAS,0DAElC,gBAlDa,sCAoDd,OACE,iBAAKU,UAAU,0BAAyB,WACtC,eAAIA,UAAU,0CAAyC,SACpD1C,EAAU,QAAU,YAGtBE,IACC,eAAGwC,UAAU,gCAA+B,oBAASxC,MAGvD,kBACEc,SAAUH,EAAaG,GACvB0B,UAAU,uEAAsE,WAEhF,iBAAKA,UAAU,4BAA2B,WACxC,0BACEC,KAAK,OACLC,YAAY,SACZF,UAAS,0BACP5B,EAAOI,MAAQ,wBAA0B,4BAEvCN,EAAS,QAAS,CACpBiC,SAAU,oBACVC,QAAS,CACPC,MAAO,4CACPf,QAAS,oCAIdlB,EAAOI,QACN,iBAAMwB,UAAU,uCAAsC,SACnD5B,EAAOI,MAAMc,cAIpB,iBAAKU,UAAU,4BAA2B,WACxC,0BACEC,KAAK,WACLC,YAAY,WACZF,UAAS,0BACP5B,EAAOK,SACH,wBACA,4BAEFP,EAAS,WAAY,CAAEiC,SAAU,0BAEtC/B,EAAOK,WACN,iBAAMuB,UAAU,uCAAsC,SACnD5B,EAAOK,SAASa,cAKrB5B,IACA,mBAAQsC,UAAU,gDAA+C,SAC9D1C,EAAU,QAAU,mBAGxBI,IAAa,SAAC4C,EAAA,EAAmB,QAGpC,gBAAKN,UAAU,2BAA0B,UACvC,mBACEO,QAvHsB,WAC5BhD,GAAW,SAAAiD,GAAS,OAAKA,CAAS,GACpC,EAsHQR,UAAU,qEAAoE,SAE7E1C,EAAU,qBAAuB,mCAItC,gBAAK0C,UAAU,kDAAiD,UAC9D,gBAAKS,IAAKC,EAAUC,IAAI,YAAYX,UAAU,kBAItD,ECpJA,EAJiB,WACf,OAAO,SAAC,EAAQ,GAClB,C","sources":["components/Auth/AuthForm.js","pages/AuthPage.js"],"sourcesContent":["import { useState, useContext } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport AuthContext from '../../store/auth-context';\r\nimport laonLogo from '../../assets/laon-logo.png';\r\nimport SmallLoadingSpinner from '../ui/SmallLoadingSpinner';\r\n\r\nconst AuthForm = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsLogin(prevState => !prevState);\r\n  };\r\n\r\n  const onSubmit = async data => {\r\n    const { email, password } = data;\r\n\r\n    setIsLoading(true);\r\n    let url;\r\n    if (isLogin) {\r\n      url =\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDOuliHGNkGaDF7oF2cPQchxui_Cu5wdUM';\r\n    } else {\r\n      url =\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDOuliHGNkGaDF7oF2cPQchxui_Cu5wdUM';\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email,\r\n          password,\r\n          returnSecureToken: true,\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      setIsLoading(false);\r\n\r\n      if (!res.ok) {\r\n        const data = await res.json();\r\n        setErrorMessage('Authentication failed');\r\n        if (data && data.error && data.error.message) {\r\n          throw new Error(data.error.message);\r\n        }\r\n      }\r\n\r\n      const data = await res.json();\r\n      // Construct a new date object in milliseconds\r\n      // Adding expires time in milliseconds to timestamp in milliseconds\r\n      const expirationTime = new Date(\r\n        new Date().getTime() + +data.expiresIn * 1000\r\n      );\r\n      authCtx.login(data.idToken, expirationTime.toISOString());\r\n\r\n      setErrorMessage('');\r\n\r\n      navigate('/', { replace: true });\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto my-28\">\r\n      <h3 className=\"mb-6 text-center text-2xl font-semibold\">\r\n        {isLogin ? 'Login' : 'Sign Up'}\r\n      </h3>\r\n\r\n      {errorMessage && (\r\n        <p className=\"mb-4 text-red-500 text-center\">Error: {errorMessage}</p>\r\n      )}\r\n\r\n      <form\r\n        onSubmit={handleSubmit(onSubmit)}\r\n        className=\"flex flex-col items-center justify-center space-y-6 mb-6 text-center\"\r\n      >\r\n        <div className=\"auth-form-input-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"E-mail\"\r\n            className={`auth-form-input ${\r\n              errors.email ? 'auth-form-input-error' : 'auth-form-input-correct'\r\n            }`}\r\n            {...register('email', {\r\n              required: 'Enter your e-mail',\r\n              pattern: {\r\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                message: 'Enter a valid e-mail address',\r\n              },\r\n            })}\r\n          />\r\n          {errors.email && (\r\n            <span className=\"self-start ml-2 text-red-500 text-sm\">\r\n              {errors.email.message}\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div className=\"auth-form-input-container\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            className={`auth-form-input ${\r\n              errors.password\r\n                ? 'auth-form-input-error'\r\n                : 'auth-form-input-correct'\r\n            }`}\r\n            {...register('password', { required: 'Enter your password' })}\r\n          />\r\n          {errors.password && (\r\n            <span className=\"self-start ml-2 text-red-500 text-sm\">\r\n              {errors.password.message}\r\n            </span>\r\n          )}\r\n        </div>\r\n\r\n        {!isLoading && (\r\n          <button className=\"auth-btn py-3 w-3/4 text-lg md:w-1/2 lg:w-1/3\">\r\n            {isLogin ? 'Login' : 'Create Account'}\r\n          </button>\r\n        )}\r\n        {isLoading && <SmallLoadingSpinner />}\r\n      </form>\r\n\r\n      <div className=\"flex justify-center mb-6\">\r\n        <button\r\n          onClick={switchAuthModeHandler}\r\n          className=\"p-1 text-lg transition-colors outline-blue-800 hover:text-blue-800\"\r\n        >\r\n          {isLogin ? 'Create new account' : 'Login with existing account'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"flex items-center justify-center cursor-default\">\r\n        <img src={laonLogo} alt=\"Laon Logo\" className=\"w-20 h-20\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import AuthForm from '../components/Auth/AuthForm';\r\n\r\nconst AuthPage = () => {\r\n  return <AuthForm />;\r\n};\r\n\r\nexport default AuthPage;\r\n"],"names":["useState","isLogin","setIsLogin","errorMessage","setErrorMessage","isLoading","setIsLoading","navigate","useNavigate","authCtx","useContext","AuthContext","useForm","register","handleSubmit","errors","formState","onSubmit","data","email","password","url","fetch","method","body","JSON","stringify","returnSecureToken","headers","res","ok","json","error","message","Error","expirationTime","Date","getTime","expiresIn","login","idToken","toISOString","replace","className","type","placeholder","required","pattern","value","SmallLoadingSpinner","onClick","prevState","src","laonLogo","alt"],"sourceRoot":""}