{"version":3,"file":"static/js/42.2416753a.chunk.js","mappings":"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","sources":["components/CheckoutForm/FormInput.js","components/CheckoutForm/AddressForm.js","components/CheckoutForm/Review.js","components/CheckoutForm/PaymentForm.js","components/CheckoutForm/Checkout.js","pages/CheckoutPage.js"],"sourcesContent":["import { Fragment } from 'react';\r\nimport { useFormContext } from 'react-hook-form';\r\n\r\nconst FormInput = ({\r\n  placeholder,\r\n  registeredText,\r\n  required,\r\n  value,\r\n  message,\r\n}) => {\r\n  const { register } = useFormContext();\r\n\r\n  return (\r\n    <Fragment>\r\n      <input\r\n        type=\"text\"\r\n        defaultValue=\"\"\r\n        placeholder={placeholder}\r\n        {...register(`${registeredText}`, {\r\n          required: required,\r\n          pattern: { value: value, message: message },\r\n        })}\r\n        className=\"w-full text-lg border-b border-gray-500 outline-none transition-all placeholder-gray-500 hover:border-black focus:border-blue-700\"\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import { useState, useEffect } from 'react';\r\nimport { useForm, FormProvider } from 'react-hook-form';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { commerce } from '../../lib/commerce';\r\n\r\nimport FormInput from './FormInput';\r\n\r\nconst AddressForm = ({ checkoutToken, next }) => {\r\n  const [shippingCountries, setShippingCountries] = useState([]);\r\n  const [shippingCountry, setShippingCountry] = useState('');\r\n  const [shippingSubdivisions, setShippingSubdivisions] = useState([]);\r\n  const [shippingSubdivision, setShippingSubdivision] = useState('');\r\n  const [shippingOptions, setShippingOptions] = useState([]);\r\n  const [shippingOption, setShippingOption] = useState('');\r\n\r\n  const methods = useForm();\r\n  const {\r\n    formState: { errors },\r\n  } = methods;\r\n\r\n  const countries = Object.entries(shippingCountries).map(([code, name]) => ({\r\n    id: code,\r\n    label: name,\r\n  }));\r\n\r\n  const subdivisions = Object.entries(shippingSubdivisions).map(\r\n    ([code, name]) => ({ id: code, label: name })\r\n  );\r\n\r\n  const options = shippingOptions.map(sO => {\r\n    const { formatted_with_symbol: formattedWithSymbol } = sO.price;\r\n    return { id: sO.id, label: `${sO.description} - (${formattedWithSymbol})` };\r\n  });\r\n\r\n  const fetchShippingCountries = async checkoutTokenId => {\r\n    const { countries } = await commerce.services.localeListShippingCountries(\r\n      checkoutTokenId\r\n    );\r\n\r\n    setShippingCountries(countries);\r\n    setShippingCountry(Object.keys(countries)[0]);\r\n  };\r\n\r\n  const fetchShippingSubdivisions = async countryCode => {\r\n    const { subdivisions } = await commerce.services.localeListSubdivisions(\r\n      countryCode\r\n    );\r\n\r\n    setShippingSubdivisions(subdivisions);\r\n    setShippingSubdivision(Object.keys(subdivisions)[0]);\r\n  };\r\n\r\n  const fetchShippingOptions = async (\r\n    checkoutTokenId,\r\n    country,\r\n    region = null\r\n  ) => {\r\n    const options = await commerce.checkout.getShippingOptions(\r\n      checkoutTokenId,\r\n      { country, region }\r\n    );\r\n\r\n    setShippingOptions(options);\r\n    setShippingOption(options[0].id);\r\n  };\r\n\r\n  const onSubmit = data =>\r\n    next({\r\n      ...data,\r\n      shippingCountry,\r\n      shippingSubdivision,\r\n      shippingOption,\r\n      shippingSubdivisions,\r\n      shippingOptions,\r\n    });\r\n\r\n  useEffect(() => {\r\n    fetchShippingCountries(checkoutToken.id);\r\n  }, [checkoutToken.id]);\r\n\r\n  useEffect(() => {\r\n    if (shippingCountry) fetchShippingSubdivisions(shippingCountry);\r\n  }, [shippingCountry]);\r\n\r\n  useEffect(() => {\r\n    if (shippingSubdivision)\r\n      fetchShippingOptions(\r\n        checkoutToken.id,\r\n        shippingCountry,\r\n        shippingSubdivision\r\n      );\r\n    // eslint-disable-next-line\r\n  }, [shippingSubdivision]);\r\n\r\n  return (\r\n    <div className=\"px-8\">\r\n      <h3 className=\"mb-8 text-xl text-gray-800\">Shipping Address</h3>\r\n      <FormProvider {...methods}>\r\n        <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n          <div className=\"grid grid-cols-1 gap-y-10 gap-x-8 mb-6 sm:grid-cols-2\">\r\n            <div>\r\n              <FormInput\r\n                placeholder=\"First name\"\r\n                registeredText=\"firstName\"\r\n                required=\"Enter your firstname\"\r\n                value={/^[A-Za-z]+$/}\r\n                message=\"Name should not contain numbers\"\r\n              />\r\n              {errors.firstName && (\r\n                <span className=\"text-red-500 text-sm\">\r\n                  {errors.firstName.message}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <FormInput\r\n                placeholder=\"Last name\"\r\n                registeredText=\"lastName\"\r\n                required=\"Enter your lastname\"\r\n                value={/^[A-Za-z]+$/}\r\n                message=\"Name should not contain numbers\"\r\n              />\r\n              {errors.lastName && (\r\n                <span className=\"text-red-500 text-sm\">\r\n                  {errors.lastName.message}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <FormInput\r\n                placeholder=\"Address\"\r\n                registeredText=\"address\"\r\n                required=\"Enter your email address\"\r\n              />\r\n              {errors.address && (\r\n                <span className=\"text-red-500 text-sm\">\r\n                  {errors.address.message}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <FormInput\r\n                placeholder=\"E-mail\"\r\n                registeredText=\"email\"\r\n                required=\"Enter your e-mail\"\r\n                value={/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i}\r\n                message=\"Enter a valid e-mail address\"\r\n              />\r\n              {errors.email && (\r\n                <span className=\"text-red-500 text-sm\">\r\n                  {errors.email.message}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <FormInput\r\n                placeholder=\"City\"\r\n                registeredText=\"city\"\r\n                required=\"Enter your city\"\r\n                value={/^[A-Za-z]+$/}\r\n                message=\"City should not contain numbers\"\r\n              />\r\n              {errors.city && (\r\n                <span className=\"text-red-500 text-sm\">\r\n                  {errors.city.message}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <FormInput\r\n                placeholder=\"ZIP/Postal Code\"\r\n                registeredText=\"zip\"\r\n                required=\"Enter your zip/postal code\"\r\n                value={/^[0-9]+$/}\r\n                message=\"Zip/Postal code should not contain letters\"\r\n              />\r\n              {errors.zip && (\r\n                <span className=\"text-red-500 text-sm\">\r\n                  {errors.zip.message}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 gap-y-6 gap-x-8 sm:grid-cols-2\">\r\n            <div>\r\n              <label className=\"text-gray-500\">Shipping Country</label>\r\n              <select\r\n                value={shippingCountry}\r\n                onChange={e => setShippingCountry(e.target.value)}\r\n                required\r\n                className=\"select\"\r\n              >\r\n                {countries.map(country => (\r\n                  <option key={country.id} value={country.id}>\r\n                    {country.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"text-gray-500\">Shipping Subdivisions</label>\r\n              <select\r\n                value={shippingSubdivision}\r\n                onChange={e => setShippingSubdivision(e.target.value)}\r\n                required\r\n                className=\"select\"\r\n              >\r\n                {subdivisions.map(subdivision => (\r\n                  <option key={subdivision.id} value={subdivision.id}>\r\n                    {subdivision.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"text-gray-500\">Shipping Options</label>\r\n              <select\r\n                value={shippingOption}\r\n                onChange={e => setShippingOption(e.target.value)}\r\n                required\r\n                className=\"select\"\r\n              >\r\n                {options.map(option => (\r\n                  <option key={option.id} value={option.id}>\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <div className=\"mb-4 text-sm font-bold\">\r\n            <p>\r\n              Please ensure that information provided is correct as wrong\r\n              information will result in an incomplete transaction.\r\n            </p>\r\n            <p>Note: Shipping Options for the United States is Domestic.</p>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <Link\r\n              to=\"/cart\"\r\n              className=\"px-4 py-2 uppercase border rounded transition-colors outline-blue-900 hover:bg-gray-100\"\r\n            >\r\n              Back to cart\r\n            </Link>\r\n            <button type=\"submit\" className=\"checkout-btn px-5 py-2 uppercase\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </FormProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddressForm;\r\n","const Review = ({ checkoutToken }) => {\r\n  const {\r\n    line_items: lineItems,\r\n    subtotal: { formatted_with_symbol: formattedWithSymbol },\r\n  } = checkoutToken;\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"mb-8 text-xl text-gray-800\">Order Summary</h3>\r\n      <ul className=\"mb-4\">\r\n        {lineItems.map(product => {\r\n          const {\r\n            line_total: { formatted_with_symbol: formattedWithSymbol },\r\n          } = product;\r\n\r\n          return (\r\n            <li\r\n              key={product.id}\r\n              className=\"flex justify-between items-center mb-8\"\r\n            >\r\n              <div className=\"flex flex-col\">\r\n                <span className=\"font-semibold text-gray-700\">\r\n                  {product.name}\r\n                </span>\r\n                <span className=\"text-gray-600 text-sm\">\r\n                  Quantity: {product.quantity}\r\n                </span>\r\n              </div>\r\n              <span>{formattedWithSymbol}</span>\r\n            </li>\r\n          );\r\n        })}\r\n        <li className=\"flex justify-between\">\r\n          <span className=\"font-semibold text-gray-700\">Total</span>\r\n          <span className=\"font-bold text-lg\">{formattedWithSymbol}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Review;\r\n","import { useContext } from 'react';\r\n\r\nimport {\r\n  Elements,\r\n  ElementsConsumer,\r\n  CardElement,\r\n} from '@stripe/react-stripe-js';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\n\r\nimport Review from './Review';\r\nimport CartContext from '../../store/cart-context';\r\n\r\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\r\n\r\nconst PaymentForm = ({ checkoutToken, shippingData, backStep, nextStep }) => {\r\n  const cartCtx = useContext(CartContext);\r\n\r\n  const {\r\n    line_items: lineItems,\r\n    subtotal: { formatted_with_symbol: formattedWithSymbol },\r\n  } = checkoutToken;\r\n\r\n  const handleSubmit = async (event, stripe, elements) => {\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) return;\r\n\r\n    const cardElement = elements.getElement(CardElement);\r\n\r\n    const { paymentMethod } = await stripe.createPaymentMethod({\r\n      type: 'card',\r\n      card: cardElement,\r\n    });\r\n\r\n    const orderData = {\r\n      line_items: lineItems,\r\n      customer: {\r\n        firstname: shippingData.firstName,\r\n        lastname: shippingData.lastName,\r\n        email: shippingData.email,\r\n      },\r\n      shipping: {\r\n        name: 'Primary',\r\n        street: shippingData.address,\r\n        town_city: shippingData.city,\r\n        county_state: shippingData.shippingSubdivision,\r\n        postal_zip_code: shippingData.zip,\r\n        country: shippingData.shippingCountry,\r\n      },\r\n      fulfillment: { shipping_method: shippingData.shippingOption },\r\n      payment: {\r\n        gateway: 'stripe',\r\n        stripe: {\r\n          payment_method_id: paymentMethod.id,\r\n        },\r\n      },\r\n    };\r\n\r\n    cartCtx.captureCheckoutHandler(checkoutToken.id, orderData);\r\n\r\n    nextStep();\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-8\">\r\n      <Review checkoutToken={checkoutToken} />\r\n      <hr />\r\n      <h3 className=\"mb-4 mt-4 text-xl text-gray-800\">Payment method</h3>\r\n      <Elements stripe={stripePromise}>\r\n        <ElementsConsumer>\r\n          {({ stripe, elements }) => (\r\n            <form onSubmit={e => handleSubmit(e, stripe, elements)}>\r\n              <p className=\"mb-8 text-sm\">\r\n                Type <span className=\"font-bold\">424242...</span> consistently\r\n                as the test numbers for the card details below\r\n              </p>\r\n              <CardElement />\r\n              <br /> <br />\r\n              <div className=\"flex justify-between\">\r\n                <button\r\n                  onClick={backStep}\r\n                  className=\"px-4 py-2 uppercase border rounded transition-colors outline-blue-900 hover:bg-gray-100\"\r\n                >\r\n                  Back\r\n                </button>\r\n                <button\r\n                  disabled={!stripe}\r\n                  className=\"checkout-btn px-5 py-2 uppercase\"\r\n                >\r\n                  Pay {formattedWithSymbol}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </ElementsConsumer>\r\n      </Elements>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaymentForm;\r\n","import { useEffect, useState, useContext } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { TiTick } from 'react-icons/ti';\r\n\r\nimport { commerce } from '../../lib/commerce';\r\n\r\nimport AddressForm from './AddressForm';\r\nimport PaymentForm from './PaymentForm';\r\nimport LoadingSpinner from '../ui/LoadingSpinner';\r\n\r\nimport CartContext from '../../store/cart-context';\r\n\r\nconst steps = ['Shipping address', 'Payment details'];\r\n\r\nconst Checkout = () => {\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [checkoutToken, setCheckoutToken] = useState(null);\r\n  const [shippingData, setShippingData] = useState({});\r\n  const [redirectTimeout, setRedirectTimeout] = useState(null);\r\n  const [redirectMessage, setRedirectMessage] = useState('');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const cartCtx = useContext(CartContext);\r\n\r\n  useEffect(() => {\r\n    const generateToken = async () => {\r\n      try {\r\n        if (!cartCtx.cart.id) return;\r\n        const token = await commerce.checkout.generateToken(cartCtx.cart.id, {\r\n          type: 'cart',\r\n        });\r\n\r\n        setCheckoutToken(token);\r\n      } catch (error) {\r\n        setRedirectMessage('Redirecting to cart...');\r\n        setRedirectTimeout(\r\n          setTimeout(() => {\r\n            navigate('/cart', { replace: true });\r\n          }, 5000)\r\n        );\r\n      }\r\n    };\r\n\r\n    generateToken();\r\n  }, [cartCtx.cart.id, navigate]);\r\n\r\n  const nextStep = () => setActiveStep(prevActiveStep => prevActiveStep + 1);\r\n  const backStep = () => setActiveStep(prevActiveStep => prevActiveStep - 1);\r\n\r\n  const next = data => {\r\n    setShippingData(data);\r\n\r\n    nextStep();\r\n  };\r\n\r\n  let Confirmation = () =>\r\n    cartCtx.order.customer ? (\r\n      <div className=\"px-8\">\r\n        <h5 className=\"mb-4 text-lg\">\r\n          Thank you for your purchase, {cartCtx.order.customer.firstname}{' '}\r\n          {cartCtx.order.customer.lastname}. Please check the spam folder in\r\n          your mail for your receipt.\r\n        </h5>\r\n        <hr />\r\n        <p className=\"mt-4\">Order ref: {cartCtx.order.customer_reference}</p>\r\n        <br />\r\n        <div className=\"flex items-center justify-between\">\r\n          <Link\r\n            reloadDocument\r\n            to=\"/cart\"\r\n            onClick={() => clearTimeout(redirectTimeout)}\r\n            className=\"px-4 py-2 uppercase border rounded transition-colors outline-blue-900 hover:bg-gray-100\"\r\n          >\r\n            Back to Cart\r\n          </Link>\r\n          <p>{redirectMessage}</p>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <LoadingSpinner />\r\n    );\r\n\r\n  if (cartCtx.errorMessage) {\r\n    Confirmation = () => (\r\n      <div className=\"px-8\">\r\n        <h5>Error: {cartCtx.errorMessage}</h5>\r\n        <br />\r\n        <Link\r\n          reloadDocument\r\n          to=\"/cart\"\r\n          className=\"px-4 py-2 uppercase border rounded transition-colors outline-blue-900 hover:bg-gray-100\"\r\n        >\r\n          Back to Cart\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const Form = () =>\r\n    activeStep === 0 ? (\r\n      <AddressForm checkoutToken={checkoutToken} next={next} />\r\n    ) : (\r\n      <PaymentForm\r\n        checkoutToken={checkoutToken}\r\n        shippingData={shippingData}\r\n        backStep={backStep}\r\n        nextStep={nextStep}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div className=\"container mx-auto max-w-2xl my-16 mb-20 px-4 font-lora\">\r\n      <div className=\"bg-white py-6 rounded shadow-md\">\r\n        <h2 className=\"text-4xl text-center mb-4\">Checkout</h2>\r\n        <div className=\"flex justify-between mb-8\">\r\n          {steps.map((step, i) => (\r\n            <div\r\n              key={i}\r\n              className={`text-gray-400 step-item ${\r\n                (activeStep === i || i < activeStep) && 'active'\r\n              }`}\r\n            >\r\n              <div className=\"step\">\r\n                {i < activeStep ? <TiTick size={24} /> : i + 1}\r\n              </div>\r\n              <p\r\n                className={`${\r\n                  (activeStep === i || i < activeStep) && 'text-gray-800'\r\n                }`}\r\n              >\r\n                {step}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {activeStep === steps.length ? (\r\n          <Confirmation />\r\n        ) : checkoutToken ? (\r\n          <Form />\r\n        ) : (\r\n          <LoadingSpinner />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n","import Checkout from '../components/CheckoutForm/Checkout';\r\n\r\nconst CheckoutPage = () => {\r\n  return <Checkout />;\r\n};\r\n\r\nexport default CheckoutPage;\r\n"],"names":["placeholder","registeredText","required","value","message","register","useFormContext","Fragment","type","defaultValue","pattern","className","checkoutToken","next","useState","shippingCountries","setShippingCountries","shippingCountry","setShippingCountry","shippingSubdivisions","setShippingSubdivisions","shippingSubdivision","setShippingSubdivision","shippingOptions","setShippingOptions","shippingOption","setShippingOption","methods","useForm","errors","formState","countries","Object","entries","map","id","label","subdivisions","options","sO","formattedWithSymbol","price","formatted_with_symbol","description","fetchShippingCountries","checkoutTokenId","commerce","keys","fetchShippingSubdivisions","countryCode","fetchShippingOptions","country","region","useEffect","onSubmit","handleSubmit","data","firstName","lastName","address","email","city","zip","onChange","e","target","subdivision","option","to","lineItems","line_items","subtotal","product","line_total","name","quantity","stripePromise","loadStripe","process","shippingData","backStep","nextStep","cartCtx","useContext","CartContext","event","stripe","elements","preventDefault","cardElement","getElement","CardElement","createPaymentMethod","card","paymentMethod","orderData","customer","firstname","lastname","shipping","street","town_city","county_state","postal_zip_code","fulfillment","shipping_method","payment","gateway","payment_method_id","captureCheckoutHandler","Elements","ElementsConsumer","onClick","disabled","steps","activeStep","setActiveStep","setCheckoutToken","setShippingData","redirectTimeout","setRedirectTimeout","redirectMessage","setRedirectMessage","navigate","useNavigate","generateToken","cart","token","setTimeout","replace","prevActiveStep","Confirmation","order","customer_reference","reloadDocument","clearTimeout","LoadingSpinner","errorMessage","Form","step","i","size","length"],"sourceRoot":""}